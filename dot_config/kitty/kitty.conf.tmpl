# vim: set ft=config:

# Fonts
font_family      FiraCode Nerd Font Mono
bold_font        auto
italic_font      auto
bold_italic_font auto
font_size {{ .fontsize }}

# You can modify the size of the cell in which each font glyph is rendered and
# the baseline at which the glyph is placed in the cell. Note that modifying the
# baseline will automatically adjust the underline and strikethrough positions
# by the same amount. Increasing the baseline raises glyphs inside the cell and
# decreasing it lowers them. Decreasing the cell size might cause rendering
# artifacts, so use with care.
modify_font cell_height 85%
modify_font baseline 3

# I dont want CTRL+SHFIT keymaps to be consumed by kitty
clear_all_shortcuts yes
map cmd+equal change_font_size all +1.0
map cmd+minus change_font_size all -1.0
map cmd+q quit

# Kitty-scrollback controls kitty via a UNIX socket
allow_remote_control socket-only
listen_on unix:/tmp/kitty

# Create an alias for the kitten
action_alias scrollback_nvim kitten
    \ $HOME/.local/share/nvim/lazy/kitty-scrollback.nvim/python/kitty_scrollback_nvim.py
    \ --nvim-args -u ~/.config/nvim/lua/tummetott/plugins/kitty-scrollback/scrollback-conf.lua

# Keymap to browse the whole scrollback buffer
map kitty_mod+enter scrollback_nvim
# map kitty_mod+g scrollback_nvim --config last_cmd
# map kitty_mod+ scrollback_nvim --config last_visited_cmd

# Open the a URL with ctrl+left click
mouse_map cmd+left release grabbed,ungrabbed mouse_handle_click link

enable_audio_bell no

# If enabled, the OS Window size will be remembered so that new instances of
# kitty will have the same size as the previous instance.
remember_window_size  yes

# The window padding (in pts) (blank area between the text and the window
# border). A single value sets all four sides. Two values set the vertical and
# horizontal sides. Three values set top, horizontal and bottom. Four values set
# top, right, bottom and left.
window_padding_width 4

# Ask for confirmation when closing an OS window or a tab with at least this
# number of kitty windows in it by window manager (e.g. clicking the window
# close button or pressing the operating system shortcut to close windows) or by
# the close_tab action. A value of zero disables confirmation. This confirmation
# also applies to requests to quit the entire application (all OS windows, via
# the quit action). Negative values are converted to positive ones, however,
# with shell_integration enabled, using negative values means windows sitting at
# a shell prompt are not counted, only windows where some command is currently
# running. Note that if you want confirmation when closing individual windows,
# you can map the close_window_with_confirmation action.
confirm_os_window_close 0

#: HACK: kitty v0.21.2 had the protocol extension for clipboard
#: concatenation enabled by default. I can disable this with 'no-append'
clipboard_control write-clipboard write-primary read-clipboard-ask read-primary-ask no-append

# Enable shell integration on supported shells. This enables features such as
# jumping to previous prompts, browsing the output of the previous command in a
# pager, etc. on supported shells.
shell_integration enabled

# Have kitty quit when all the top-level windows are closed on macOS. By
# default, kitty will stay running, even with no open windows, as is the
# expected behavior on macOS.
macos_quit_when_last_window_closed yes
